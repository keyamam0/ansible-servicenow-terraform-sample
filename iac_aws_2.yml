#
# Terraform Run
#
- hosts: localhost
  tasks:
    - name: Terraform Run
      community.general.terraform:
      #https://docs.ansible.com/ansible/latest/collections/community/general/terraform_module.html
      #cloud.terraform.terraform:

        project_path: 'terraform/'
        state: present
        force_init: yes
        init_reconfigure: yes
        variables_files: "./tf.tfvars"
        backend_config:
          region: "ap-northeast-1"
          bucket: "keyamamo-demo3"
          key: "{{ my_tf_key }}"
        variables: 
           TF_VAR_tag: "{{ my_tf_key }}"
           TF_VAR_expire: "{{ lookup('pipe', 'date --date \"1 days\" +%Y-%m-%d') }}"
          #  TF_VAR_expire: "{{ lookup('pipe', 'date --date \"1 days\" +%Y-%m-%dT%H:%M:%S') }}"

    - name: Inventory Update
      ansible.builtin.meta: refresh_inventory

#
# EC2 Config
#
- hosts: tag_myGroup_{{ my_tf_key }}
  remote_user: ec2-user
  become: yes
  gather_facts: no
  tasks:
    - name: Wait for SSH connection
      ansible.builtin.wait_for_connection:

    - name: Gather fact
      ansible.builtin.setup:

    - name: httpd Install
      ansible.builtin.dnf:
        name: httpd
        state: present

    - name: httpd Launch
      ansible.builtin.systemd:
        name: httpd.service
        enabled: yes
        state: started

    - name: Temp password Create
      set_fact:
        random_password: "{{ lookup('community.general.random_string', length=12, charset='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@') }}"

    # - name: Temp password Debug
    #   debug:
    #     var: random_password

    - name: Temp password Set
      user:
        name: "hatdemo"
        state: present
        createhome: yes
        shell: /bin/bash
        password: "{{ random_password | password_hash('sha512') }}"
        update_password: always

    - name: SSHD Config
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        state: present
        backrefs: yes
      with_items:
        - { regexp: '^#?PasswordAuthentication', line: 'PasswordAuthentication yes' }
        - { regexp: '^#?ClientAliveInterval', line: 'ClientAliveInterval 120' }
        - { regexp: '^#?ClientAliveCountMax', line: 'ClientAliveInterval 3' }

    - name: SSHD Restart
      service:
        name: sshd
        state: restarted

    - name: Temp password Set expiration
      shell: chage -d 0 hatdemo

    # - name: Retrieve EC2 instance information
    #   ec2_instance_info:
    #     region: your_region
    #     filters:
    #       "tag:Name": your_instance_name
    #     aws_access_key: your_aws_access_key
    #     aws_secret_key: your_aws_secret_key
    #   register: ec2_info

    # - name: Temp password Create
    #   set_fact:
    #     ec2hosts: "tag_myGroup_{{ my_tf_key }}"

#
# Notification
#
- hosts: localhost
  gather_facts: false

  # vars:
  #  slack_token : xxx

  tasks:
    # - name: Retrieve EC2 instance information
    #   ec2_instance_info:
    #     filters:
    #       "tag:myGroup": "{{ my_tf_key }}"
    #   register: ec2_info

    - name: Send message
      slack:
        token: "{{ slack_token }}"
        # channel: '#ansible-demo'
        channel: "{{ slack_channel }}"
        msg: |
          Ansible Automation Platformより
          以下のSandbox環境の準備が完了しました

    - name: Send message
      slack:
        token: "{{ slack_token }}"
        # channel: '#ansible-demo'
        channel: "{{ slack_channel }}"
        msg: | 
          >{{ itemi }} 
          >{{ hostvars[itemi].random_password }}
      loop: "{{ groups['tag_myGroup_' + my_tf_key] }}"
      loop_control:
        loop_var: itemi
      vars:
        itemi: "{{ inventory_hostname }}"

    # - name: Print instance public IP addresses
    #   debug:
    #     var: ec2_info.instances | map(attribute='public_ip_address') | list

    # - name: Send message
    #   slack:
    #     token: xoxb-5334377005971-5363801820688-hAkXf0JexQ8z1mklGU5lm9eh
    #     channel: '#ansible-demo'
    #     msg: "準備完了. {{ec2_info.instances | map(attribute='public_ip_address') | list}}"
